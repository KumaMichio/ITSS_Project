import React, { useState } from 'react';
import { userService } from '../../services/user.service';
import '../../utils/authDebug'; // Import auth debug utility
import '../../utils/quickAdminLogin'; // Import quick admin login helper

const AdminAddUser: React.FC = () => {
    const [formData, setFormData] = useState({
        username: '',
        email: '',
        password: '',
        role: 'customer'
    });
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [success, setSuccess] = useState<string | null>(null);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setLoading(true);
        setError(null);
        setSuccess(null);

        // Debug: Check auth state before making request
        console.log('=== PRE-REQUEST AUTH DEBUG ===');
        const token = localStorage.getItem('authToken');
        const user = localStorage.getItem('user');
        console.log('Token exists:', !!token);
        if (user) {
            try {
                const userData = JSON.parse(user);
                console.log('User role:', userData.role);
                console.log('Full user data:', userData);
            } catch (e) {
                console.error('Error parsing user:', e);
            }
        }
        console.log('==============================');

        // Debug: Log form data being sent
        console.log('üîç Form data being sent:', formData);
        console.log('üîç Password field value:', formData.password);
        console.log('üîç Password length:', formData.password?.length || 'undefined');

        try {
            const response = await userService.createUser(formData);
            if (response.success) {
                setSuccess('Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!');
                // Reset form
                setFormData({
                    username: '',
                    email: '',
                    password: '',
                    role: 'customer'
                });
            } else {
                setError(response.error || 'L·ªói khi th√™m ng∆∞·ªùi d√πng');
            }
        } catch (err) {
            console.error('Error creating user:', err);
            setError('L·ªói k·∫øt n·ªëi v·ªõi server');
        } finally {
            setLoading(false);
        }
    };

    const handleReset = () => {
        setFormData({
            username: '',
            email: '',
            password: '',
            role: 'customer'
        });
        setError(null);
        setSuccess(null);
    };

    return (
        <div className="p-6">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-3xl font-bold text-gray-800">Th√™m Ng∆∞·ªùi D√πng M·ªõi</h1>
            </div>

            {error && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                    <p className="font-bold">L·ªói</p>
                    <p>{error}</p>
                    {error.includes('401') || error.includes('Unauthorized') ? (
                        <div className="mt-2">
                            <p className="text-sm">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin. Th·ª≠:</p>
                            <button
                                onClick={() => (window as any).quickAdminLogin()}
                                className="mt-1 px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                            >
                                ƒêƒÉng nh·∫≠p Admin (admin/admin123)
                            </button>
                        </div>
                    ) : null}
                </div>
            )}

            {success && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                    <p className="font-bold">Th√†nh c√¥ng</p>
                    <p>{success}</p>
                </div>
            )}

            <div className="bg-white rounded-lg shadow-md p-6 max-w-2xl">
                <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                            T√™n ƒëƒÉng nh·∫≠p *
                        </label>
                        <input
                            type="text"
                            value={formData.username}
                            onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#088178] focus:border-transparent"
                            required
                            minLength={3}
                            placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                        />
                    </div>

                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                            Email *
                        </label>
                        <input
                            type="email"
                            value={formData.email}
                            onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#088178] focus:border-transparent"
                            required
                            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                        />
                    </div>

                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                            M·∫≠t kh·∫©u *
                        </label>
                        <input
                            type="password"
                            value={formData.password}
                            onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#088178] focus:border-transparent"
                            required
                            minLength={6}
                            placeholder="Nh·∫≠p m·∫≠t kh·∫©u (t·ªëi thi·ªÉu 6 k√Ω t·ª±)"
                        />
                    </div>

                    <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                            Vai tr√≤ *
                        </label>
                        <select
                            value={formData.role}
                            onChange={(e) => setFormData({ ...formData, role: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#088178] focus:border-transparent"
                            required
                        >
                            <option value="customer">Customer (Kh√°ch h√†ng)</option>
                            <option value="seller">Seller (Ng∆∞·ªùi b√°n)</option>
                            <option value="admin">Admin (Qu·∫£n tr·ªã vi√™n)</option>
                        </select>
                        <p className="text-sm text-gray-500 mt-1">
                            Ch·ªçn vai tr√≤ ph√π h·ª£p cho ng∆∞·ªùi d√πng
                        </p>
                    </div>

                    <div className="flex justify-end space-x-4 pt-4">
                        <button
                            type="button"
                            onClick={handleReset}
                            className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition"
                            disabled={loading}
                        >
                            ƒê·∫∑t l·∫°i
                        </button>
                        <button
                            type="submit"
                            disabled={loading}
                            className="px-6 py-2 bg-[#088178] text-white rounded-lg hover:bg-[#066e6a] transition disabled:opacity-50"
                        >
                            {loading ? 'ƒêang th√™m...' : 'Th√™m ng∆∞·ªùi d√πng'}
                        </button>
                    </div>
                </form>
            </div>

            <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h3 className="text-sm font-medium text-blue-800 mb-2">L∆∞u √Ω:</h3>
                <ul className="text-sm text-blue-700 space-y-1">
                    <li>‚Ä¢ T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª± v√† l√† duy nh·∫•t</li>
                    <li>‚Ä¢ Email ph·∫£i c√≥ ƒë·ªãnh d·∫°ng h·ª£p l·ªá v√† ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng</li>
                    <li>‚Ä¢ M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±</li>
                    <li>‚Ä¢ Vai tr√≤ quy·∫øt ƒë·ªãnh quy·ªÅn truy c·∫≠p c·ªßa ng∆∞·ªùi d√πng trong h·ªá th·ªëng</li>
                </ul>
            </div>
        </div>
    );
};

export default AdminAddUser;
